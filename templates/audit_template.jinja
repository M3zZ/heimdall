#/usr/bin/env python
#-*- coding: utf-8 -*-
#
# This script is generated automatically by heimdall and deleted after execution
# DO NOT EDIT IT MANUALLY
#
import subprocess
from os import kill
from signal import alarm, signal, SIGALRM, SIGKILL
import pickle
import re

def execute_cmd(cmd):
    output = ''
    err = ''
    exit_code = 1

    timeout = 15
    class Alarm(Exception):
        pass
    def alarm_handler(signum, frame):
        raise Alarm
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if timeout != -1:
        signal(SIGALRM, alarm_handler)
        alarm(timeout)
    try:
        (output, err) = p.communicate()
        if timeout != -1:
            alarm(0)
    except Alarm:
        pids = [p.pid]
        for pid in pids:
            # process might have died before getting to this line
            # so wrap to avoid OSError: no such process
            try:
                kill(pid, SIGKILL)
            except OSError:
                pass
        return '', 'Timeout on Command %s' % cmd, 254
    except Exception as e:
        return '', 'Command %s finished with error %s' %(cmd,e), 255

    exit_code = p.returncode
    if err and not output:
        return '', 'Command %s finished with error %s' %(cmd,unicode(err, 'utf-8')), 255
    return unicode(output, "utf8"), unicode(err, "utf8"), exit_code

def serialize(fpath, audit_cmd_dict):
    try:
        with open(fpath, 'w') as rfile:
            pickle.dump(audit_cmd_dict, rfile)
        rfile.close()
    except pickle.PickleError:
        print "Unable to Serialize"
        exit(1)

if __name__ == "__main__":
    audit_commands = {
    {%- for type in types %}
        '{{ type.name }}':
        {
          {% for rules in type.rules -%}
          {{ rules.id }}:{
            'cmd': [{%- for cmd in rules.audit -%}
{%- if '.sh' == cmd[-3:] -%}
"/bin/bash /opt/heimdall/scripts/{{ cmd }}"
{%- else -%}
                            "{{ cmd }}"
                       {%- endif -%}
                       {%- if not loop.last -%}
                       ,
                       {%- endif -%}
{%- endfor -%}],
            'out': '',
            'err': '',
            'return_code': ''
          },
        {% endfor -%}
        },
    {% endfor -%}
    }

    cmd_list = []
    for type in audit_commands.keys():
        for id in audit_commands[type]:
            current_cmd = audit_commands[type][id]['cmd']
            audit_commands[type][id]['out'] = []
            audit_commands[type][id]['err'] = []
            audit_commands[type][id]['return_code'] = []
            for cc in current_cmd:
                out, err, return_code = execute_cmd(cc)
                audit_commands[type][id]['out'].append(out)
                audit_commands[type][id]['err'].append(err)
                audit_commands[type][id]['return_code'].append(return_code)
    serialize('/opt/heimdall/audit/{{ rpickle }}', audit_commands)